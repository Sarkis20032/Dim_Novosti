import telebot
from telebot import types
import sqlite3
import os

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
ADMIN_IDS = {ADMIN_ID}  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("bot_database.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    full_name TEXT,
    likes TEXT,
    dislikes TEXT,
    suggestions TEXT,
    gender TEXT,
    age_group TEXT,
    visit_frequency TEXT,
    survey_completed INTEGER DEFAULT 0  -- –î–æ–±–∞–≤–∏–ª–∏ —Ñ–ª–∞–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
)
""")
conn.commit()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
cursor.execute("""
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    message TEXT,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
""")
conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['add_admin'])
def add_admin(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    bot.register_next_step_handler(message, save_admin)

def save_admin(message):
    try:
        new_admin_id = int(message.text)
        ADMIN_IDS.add(new_admin_id)
        bot.reply_to(message, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")

# –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
@bot.message_handler(commands=['message'])
def select_client(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:")
    bot.register_next_step_handler(message, send_message_to_client)

def send_message_to_client(message):
    try:
        user_id = int(message.text.strip())
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É:")
        bot.register_next_step_handler(message, lambda msg: forward_message_to_client(msg, user_id))
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")

def forward_message_to_client(message, user_id):
    try:
        bot.send_message(user_id, message.text)
        bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—à—ë–ª –∞–Ω–∫–µ—Ç—É)
@bot.message_handler(func=lambda message: True)
def check_survey(message):
    user_id = message.from_user.id

    cursor.execute("SELECT survey_completed FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    bot.send_message(message.chat.id, f"DEBUG: survey_completed = {result}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    if result and result[0] == 1:
        bot.send_message(message.chat.id, "–í—ã –ø—Ä–æ—à–ª–∏ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! –ú–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ! –ù–∞–ø–∏—à–∏—Ç–µ /start.")

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = f"{message.from_user.first_name} {message.from_user.last_name or ''}"

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if user:
        bot.reply_to(message, "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∞–Ω–∫–µ—Ç—É. –°–ø–∞—Å–∏–±–æ!")
    else:
        cursor.execute("INSERT OR IGNORE INTO users (user_id, username, full_name) VALUES (?, ?, ?)", (user_id, username, full_name))
        conn.commit()
        send_intro(message)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_intro(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –º–µ–Ω—è –∑–æ–≤—É—Ç –î–∞–≤–∏–¥üëã ...\n–í—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –º—ã —Å—Ç–∞–ª–∏ –ª—É—á—à–µ –¥–ª—è –≤–∞—Å?", reply_markup=generate_yes_no_keyboard())
    bot.register_next_step_handler(message, ask_survey_consent)

def generate_yes_no_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    return markup

# –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–æ—á—å
def ask_survey_consent(message):
    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ!...\n–°–º–æ–∂–µ—Ç–µ –Ω–∞–º –ø–æ–º–æ—á—å, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞?", reply_markup=generate_yes_no_keyboard())
    bot.register_next_step_handler(message, ask_likes)

# –ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
def ask_likes(message):
    bot.send_message(message.chat.id, "–ö–∞–∫–∏–µ 2 –≤–µ—â–∏ –≤ –Ω–∞—à–∏—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö –≤—ã —Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?")
    bot.register_next_step_handler(message, save_likes)

def save_likes(message):
    cursor.execute("UPDATE users SET likes = ? WHERE user_id = ?", (message.text, message.from_user.id))
    conn.commit()
    ask_dislikes(message)

def ask_dislikes(message):
    bot.send_message(message.chat.id, "–ö–∞–∫–∏–µ –≤–µ—â–∏ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è?")
    bot.register_next_step_handler(message, save_dislikes)

def save_dislikes(message):
    cursor.execute("UPDATE users SET dislikes = ? WHERE user_id = ?", (message.text, message.from_user.id))
    conn.commit()
    ask_suggestions(message)

def ask_suggestions(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ –±—ã –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏, –±—É–¥—É—á–∏ –Ω–∞ –º–æ–µ–º –º–µ—Å—Ç–µ?")
    bot.register_next_step_handler(message, save_suggestions)

def save_suggestions(message):
    cursor.execute("UPDATE users SET suggestions = ?, survey_completed = 1 WHERE user_id = ?", (message.text, message.from_user.id))
    conn.commit()
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–Ω–∫–µ—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã
@bot.message_handler(commands=['clear_database'])
def clear_database(message):
    if message.from_user.id in ADMIN_IDS:
        cursor.execute("DELETE FROM users")
        conn.commit()
        bot.reply_to(message, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–∑—ã
@bot.message_handler(commands=['count_clients'])
def count_clients(message):
    cursor.execute("SELECT COUNT(*) FROM users")
    count = cursor.fetchone()[0]
    bot.reply_to(message, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {count}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(message, perform_broadcast)

def perform_broadcast(message):
    cursor.execute("SELECT user_id FROM users")
    for user_id, in cursor.fetchall():
        try:
            bot.send_message(user_id, message.text)
        except:
            pass
    bot.reply_to(message, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(non_stop=True, skip_pending=True)
